Решение обыкновенных и частных дифференциальных уравнений с использованием нейронных сетей

# Аннотация
В научно-исследовательской работе рассматриваются методы решения обыкновенных дифференциальных уравнений с использованием нейронных сетей. 
Для решения задач используется фреймворк PyDEns. При помощи фреймворка PyDEns возможно решать задачи такие как обыкновенные дифференциальные уравнение 
(ODE – Ordinary Differential Equations) и дифференциальные уравнения в частных производных (PDE – Partial Differential Equations).


# Применение дифференциальных уравнений играет важную роль в различных областях науки и техники. 
Зачастую традиционные методы решения ДУ не позволяют достичь необходимой точности результата, либо требуют большого времени для своей работы. 


# Постановка задачи
В настоящее время разрабатываются новые методы решения дифференциальных уравнений. Одним из актуальных и интересных методов является решение ДУ с применением нейронных сетей.  
Ее эффективность основана на ряде свойств нейросетей. Важной особенностью нейросетевого подходя является устойчивость нейросетевой модели по отношению к ошибкам в данных, а именно неточностям в задании коэффициентов уравнений, граничных и начальных условий, возмущениям границы, погрешностям вычислений.

Решение
Сперва пройдемся по всем этапам настройки PyDEns модели на простом примере обыкновенных дифференциальных уравнений и потом решим чуть более сложное дифференциальное уравнение Пуассона. 
Через систему импортируем библиотеки tensorflow, numpy, matplotlib.pyplot. 


Code:

import tensorflow as tf
import matplotlib.pyplot as plt
import warnings
warnings.filterwarnings('ignore')

from pydens import Solver, NumpySampler, add_tokens, ConstantSampler
import numpy as np

add_tokens()


# Create solver for differential equation

pde = {'n_dims': 2,
       'form': lambda u, x, y: D(D(u, x), x) + D(D(u, y), y) - 5 * sin(np.pi * (x + y)),
       'boundary_condition': 1}

body = {'layout': 'fa fa fa f',
        'units': [15, 25, 15, 1],
        'activation': [tf.nn.tanh, tf.nn.tanh, tf.nn.tanh]}

config = {'body': body,
          'pde': pde}

us = NumpySampler('uniform', dim=2) # procedure for sampling points from domain       
       
